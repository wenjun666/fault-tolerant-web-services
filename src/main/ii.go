package main

import "os"
import "fmt"
import (
	"mapreduce"
	"log"
	"unicode"
	"strings"
	"strconv"
	"sort"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// TODO: you should complete this to do the inverted index challenge
	// if value is empty
	// return empty res
	if len(value) == 0 {
		log.Fatal("file ", document," is empty.")
		return
	}

	//get distinct words from this file
	words := distinctWords(value)

	//if there is no valid words in this file
	//return empty res
	if words == nil {
		log.Fatal("file ", document, " has no valid word.")
	}

	//else append word/document pair into result
	for w := range words {
		res = append(res, mapreduce.KeyValue{ Key: w, Value: document })
	}
	return
}

func distinctWords(value string) (map[string]struct{}) {
	// use a map to save word/count pair
	// return this map
	wcount := make(map[string]struct{})

	//define the split rule
	//if the character is not letter and not number, it is a partition symbol
	f := func(c rune) bool {
		return !unicode.IsLetter(c) && !unicode.IsNumber(c)
	}
	words := strings.FieldsFunc(value,f)

	//if words is nil, there is no valid words in this file
	if words == nil {
		return wcount
	}
	for _, w := range words {
		if _, ok := wcount[w]; ok {
			continue
		} else {
			wcount[w] = struct{}{}
		}
	}
	return wcount

}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// TODO: you should complete this to do the inverted index challenge
	// key: keyword, values: array of all the documents where this key word is
	numDoc := len(values)
	sort.Strings(values)
	res := strconv.Itoa(numDoc) + " "
	res += strings.Join(values,",")
	return res
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
